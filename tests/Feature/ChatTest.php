<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ChatTest extends TestCase
{
    Protected $email = 'first1@gmail.com';
    Protected $password = 12345678;
    protected $token;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->token = $this->getToken();
    }

    /**
     * A list of message .
     *
     * @return void
     */
    public function testreciveMessage()
    {

        $response = $this->withHeaders([
            'Authorization' => 'Bearer ' . $this->token,
        ])->json('Get', '/api/messageList');
        $response->assertStatus(200);
    }


    /**
     * A list of archive message .
     *
     * @return void
     */
    public function testarchiveMessage()
    {

        $response = $this->withHeaders([
            'Authorization' => 'Bearer ' . $this->token,
        ])->json('Get', '/api/archive');
        $response->assertStatus(200);
    }

    /**
     * get message by id success .
     *
     * @return void
     */
    public function testGetMessageById()
    {

        $response = $this->withHeaders([
            'Authorization' => 'Bearer ' . $this->token,
        ])->json('Get', '/api/message/1');
        $response->assertStatus(200)->assertJson([
            'status' => true
        ]);

    }

    /**
     * set message by id success to Archive .
     *
     * @return void
     */
    public function testSetMessageToArchive()
    {
        $response = $this->withHeaders([
            'Authorization' => 'Bearer ' . $this->token,
        ])->json('POST', '/api/archive', ['id' => 1]);
        $response->assertStatus(200)->assertJson([
            'status' => true
        ]);

    }


    public function getToken()
    {
        $body = [
            'email' => $this->email,
            'password' => $this->password,
        ];
        $auth_response = $this->json('POST', '/api/login', $body, ['Accept' => 'application/json']);

        $token = $auth_response->getData()->data->token;
        return $token;
    }
}
